# ===============================================================
# SERVER CONFIGURATION
# ===============================================================
# Specifies the port your embedded web server (like Tomcat) will run on.
# 8080 is the default. It's good practice to define it explicitly.
server.port=8080

# Sets the context path for your application. For example, if set to /api,
# all your endpoints will be accessible under http://localhost:8080/api/...
# Leaving it blank means the application runs at the root path.
server.servlet.context-path=/

# ===============================================================
# SPRING BOOT APPLICATION CONFIGURATION
# ===============================================================
# The name of your application. This is used in logging and other places.
spring.application.name=email-writer-sb

# ===============================================================
# DATABASE (DATASOURCE) CONFIGURATION \u2699\uFE0F
# ===============================================================
# The JDBC URL for your database connection. This is a secret and should
# be provided as an environment variable (DB_URL) in your deployment environment (like Render).
spring.datasource.url=${DB_URL}

# The username for your database connection.
# Note: When using a full connection URL from a service like Render or Supabase,
# the username and password are often part of the URL itself, making these
# separate properties redundant. However, it's good practice to have them.
spring.datasource.username=${DB_USER}

# The password for your database connection. This is a secret and should
# be provided as an environment variable (DB_PASS).
spring.datasource.password=${DB_PASS}

# ===============================================================
# JPA & HIBERNATE CONFIGURATION
# ===============================================================
# This tells Hibernate (the JPA provider) which SQL dialect to use.
# It ensures that Hibernate generates SQL compatible with your database.
# This example is for PostgreSQL. For MySQL, it would be org.hibernate.dialect.MySQLDialect.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# This property controls how Hibernate manages your database schema.
# - 'update': Hibernate will attempt to update the schema to match your entities. Good for development.
# - 'validate': Hibernate checks if the schema matches your entities and fails if it doesn't. Safer for production.
# - 'create-drop': Creates the schema on startup and drops it on shutdown. Good for testing.
# - 'none': Does nothing. Best for production where you manage the schema with migration tools like Flyway or Liquibase.
spring.jpa.hibernate.ddl-auto=update

# When set to true, Hibernate will print the SQL queries it generates to the console.
# This is very useful for debugging database interactions during development.
# It's recommended to set this to 'false' in production to avoid noisy logs.
spring.jpa.show-sql=true

# When show-sql is true, this formats the printed SQL to be more readable.
spring.jpa.properties.hibernate.format_sql=true

# ===============================================================
# SECURITY CONFIGURATION \uD83D\uDD10
# ===============================================================
# The secret key used for signing JWTs (JSON Web Tokens).
# This MUST be a long, random, and unpredictable string.
# It should always be provided as an environment variable (JWT_SECRET).
spring.app.jwtSecret=${JWT_SECRET}

# The expiration time for JWTs in milliseconds.
# 3600000 ms = 1 hour.
spring.app.jwtExpirationMs=3600000

# ===============================================================
# ACTUATOR & MONITORING CONFIGURATION \uD83E\uDE7A
# ===============================================================
# The base path for all actuator endpoints (e.g., /actuator/health).
management.endpoints.web.base-path=/actuator

# Explicitly exposes specific actuator endpoints over the web.
# It's a security best practice to only expose what you need.
# 'health' is used for health checks by deployment platforms.
# 'info' can display application information.
management.endpoints.web.exposure.include=health,info

# Controls how much detail is shown by the /health endpoint.
# - 'when_authorized': Shows full details only to authenticated users.
# - 'always': Shows details to everyone (use with caution).
# - 'never': Never shows details.
management.endpoint.health.show-details=when_authorized

# ===============================================================
# CUSTOM APPLICATION PROPERTIES
# ===============================================================
# Your custom properties. This example is for the Gemini API key.
# This should be provided as an environment variable (GEMINI_API_KEY).
gemini.api.key=${GEMINI_API_KEY}

# The URL for the frontend application that is allowed to make requests (CORS).
# This should be provided as an environment variable (CORS_ALLOWED_ORIGIN).
cors.allowed.origin=${CORS_ALLOWED_ORIGIN}